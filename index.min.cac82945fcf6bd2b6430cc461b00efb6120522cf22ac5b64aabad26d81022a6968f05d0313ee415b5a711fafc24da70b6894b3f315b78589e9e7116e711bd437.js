var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/introduction/welcome/",title:"Welcome",description:"AppservR is an open-source program to deploy R Shiny apps on Windows and Linux easily.",content:"Get started # AppservR can be downloaded from GitHub (pick a download option for the latest release for your platform). Download â†’\nDownload\nOur one-page Quick Start tutorial will help you getting started. Quick Start â†’\nGo further # Get instructions on how to accomplish common tasks with AppservR. Recipes â†’\nContributing # We welcome very much contributions and feedback on this project. Please feel free to contribute, starting by opening an issue on GitHub to report a bug or discuss features. Contributing â†’\nHelp # Get help on AppservR. Help â†’\n"}).add({id:1,href:"/docs/introduction/quick-start/",title:"Quick Start",description:"A one page tutorial to use AppservR.",content:"Requirements # AppservR runs your Shiny apps using your system installation of R. You need to have R installed on your system to use it. You will also need the shiny package and all other R package your apps need. Learn more about Shiny â†’\nðŸ’¡  Make sure first that you are able to run your Shiny app properly using R/Rstudio to check that all required packages are installed.   Download \u0026amp; Install # Get the latest AppservR executable for your platform on Github. You will need to chose the download option suited to your platform.\nDownload\nTo install, just uncompress the archive at a location of your choice.\nRun # AppservR is a command-line program with a web graphical user interface. Most settings can be configured using only the web interface, which means that you do not need to access the server to configure a new Shiny app.\nStart a terminal window in the directory where AppservR executable file is and then type:\n./appservR serve  Go to http://localhost:8080. You should see a running sample app (the classic Shiny\u0026rsquo;s Old Faithful Geyser Data, with a twist). If not, see below.\nConfigure # When you run AppservR for the first time, it will create in the the same directory as the executable file:\n a config.yml configuration file, an apps folder containing a sample Shiny app, a SQLite database file holding apps and users settings.  Settings which require restarting the server to take effect are defined in the config.yml file. Other settings can be changed via the web interface.\nConfiguration file # config.yml configuration file is created in the same directory as the executable file, and allows setting the port and host to listen on, the location of the Rscript executable, etc. It is populated with default settings which should work for most users.\nIn particular, AppservR will look for the Rscript executable at the default installation location for your platform. If it is installed elsewhere, you will not see the sample app when navigating to http://localhost:8080, and you should set the appropriate location in the config.yml file.\nWeb interface # Go to http://localhost:8080/admin to access the admin interface.\nYou will first need to register as a user via the login \u0026gt; signup form. The first user to sign up is registered as an admin user.\nAfter you have created your admin account and successfully logged in, you can configure existing or new Shiny apps at http://localhost:8080/admin/apps. Several apps can live on the same server and be accessed using the path you configure.\nOn each app configuration page you can see also the console output of the R session used to run your app, which can be useful to troubleshoot issues.\nGo further # Check our tutorials on more advanced uses of AppservR. Recipes â†’\n"}).add({id:2,href:"/docs/recipes/customize-styling/",title:"Customize styling",description:"Built-in pages (login, etc.) can be customized to match your image.",content:"Customize html templates # All buit-in pages, such as signup, login, error pages, are embeded in AppservR executable. However, they can be changed easily if you want to translate them to your language, add your company\u0026rsquo;s logo, etc.\nYou just need to create a templates directory at the same location as the executable file. AppservR will look for existing files in this directory before falling back to the default templates.\nPlease check out this folder on Github and download the templates files that you want to modify in your local templates folder (keeping the exact same subdirectories and filenames). The template engine is Go\u0026rsquo;s default template package. Please check out their doc to learn about the syntax. However, you would likely just need to modify the html.\nAdd/modify static files # In a similar way as the templates folder, you can create an assets folder at the same location as AppservR executable. Static files will be looked up in this directory, fall back to default bundle files if they do not exist, and return a 404 not found error if the file is not present neither in your assets local folder or in the default bundled assets folder.\nThis can be useful to add external javascript, css or images.\nThe content of the assets folder is served under the /assets/ url path.\nBeware that static files will be served to all users, and you cannot manage access to this folder.\n"}).add({id:3,href:"/docs/recipes/manage-auth/",title:"Manage user authentication",description:"AppservR manages user authentication and access restriction to your apps.",content:"Manage users # You can create new users via the admin interface, or users can sign up themselves.\nUsers belong to groups that you can create through the admin interface. By default, the first user to sign up belongs to the admins group. The admins group cannot be renamed nor removed, and admin users cannot remove themselves from this group.\nAccess control # You can control who is allowed to access each app:\n Everyone All authenticated users Users belonging to specific groups  This setting can be found in each app page in the admin interface.\nGet authenticated user from your app # You R app can be aware of the authentication infos for the current user, if any. This information is accessible in the HTTP headers sent to your app by the AppservR proxy.\nThe default app (Old Faithful Geyser Data) demonstrates how to use this information to identify the user currently logged in.\nFrom Shiny, username and displayed name can be accessed from your server function as follows:\nserver \u0026lt;- function(input, output, session) { output$username \u0026lt;- renderText({ if (exists(\u0026quot;HTTP_APPSERVR_USERNAME\u0026quot;, envir=session$request)) { get(\u0026quot;HTTP_APPSERVR_USERNAME\u0026quot;, envir=session$request) } else { \u0026quot;unknown\u0026quot; } }) output$displayed_name \u0026lt;- renderText({ if (exists(\u0026quot;HTTP_APPSERVR_DISPLAYEDNAME\u0026quot;, envir=session$request)) { get(\u0026quot;HTTP_APPSERVR_DISPLAYEDNAME\u0026quot;, envir=session$request) } else { \u0026quot;unknown\u0026quot; } }) ... }  "}).add({id:4,href:"/docs/recipes/install-service/",title:"Install as a service",description:"AppservR can be installed as a service to run automatically in the background.",content:"Manage service via the CLI # The appservr service command allows installing and managing the AppservR service on Windows an Linux.\nðŸ’¡  Managing services requires to run a command prompt as admin on Windows.   Install # appservr service install sub-command installs AppservR as a service (running the executable file at its current location).\nOn Windows, only admins can install services, and services run with administrative privileges by default. We recommend that you change this, using the services configuration panel after install, in order to have it ran by a non-admin account. Otherwise, you allow AppservR admin to run arbitrary scripts as admin, which is a security threat (AppservR uses your system installation of R and is not isolated from your system).\nStart # appservr service start starts the service.\nStop # appservr service stop stops the service.\nUninstall # appservr service remove uninstalls the service if it is already stopped, or schedule removal right after it is stopped.\nRun without admin rights on Windows # Without admin privilege you cannot install AppservR as a service on Windows. However, you can still run it as a scheduled task to run on startup or at session start, which should be a decent alternative in most cases.\n"}).add({id:5,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:"To be completed.\n"}).add({id:6,href:"/docs/help/about/",title:"About",description:"About AppservR",content:"Why this project? # There are already some alternatives to deploy R Shiny apps:\n shinyapps.io Shiny server ShinyProxy  and maybe some others.\nHowever, working in an organization where data is not the primary focus and with limited IT admin resources (100% Windows!), I found no easy way to share Shiny apps internally as proof of concept.\nAppservR is intended as a solution for simple deployment with limited admin resources, without conceding performance.\nAlso it was a fun project to start with the Go programming language during COVID-19 lockdowns weekends.\nAbout this website # This documentation website was built using Doks, an amazing theme for Hugo.\nYou can contribute if you think that some content is missing clarity etc. on this GitHub repository.\n"}).add({id:7,href:"/docs/help/",title:"Help",description:"Get help.",content:""}).add({id:8,href:"/docs/introduction/",title:"Introduction",description:"Introduction to AppservR",content:""}).add({id:9,href:"/docs/recipes/",title:"Recipes",description:"Manual to perform common tasks with AppserV",content:""}).add({id:10,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()